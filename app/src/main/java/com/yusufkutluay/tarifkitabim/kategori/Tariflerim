package com.yusufkutluay.tarifkitabim.kategori

import android.graphics.Rect
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.LinearLayout
import android.widget.SearchView
import android.widget.Toast
import androidx.core.view.setPadding
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.room.Query
import androidx.room.Room
import com.google.android.material.snackbar.Snackbar
import com.yusufkutluay.tarifkitabim.R
import com.yusufkutluay.tarifkitabim.adapter.RecyclerAdapter
import com.yusufkutluay.tarifkitabim.databinding.FragmentTariflerimBinding
import com.yusufkutluay.tarifkitabim.db.TarifDao
import com.yusufkutluay.tarifkitabim.db.TarifDatabase
import com.yusufkutluay.tarifkitabim.model.Tarif
import com.yusufkutluay.tarifkitabim.model.TarifListesi
import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers
import io.reactivex.rxjava3.disposables.CompositeDisposable
import io.reactivex.rxjava3.schedulers.Schedulers
import java.util.Locale


class TariflerimFragment : Fragment() {

    private var tarifBinding : FragmentTariflerimBinding? = null
    private val binding get() = tarifBinding

    private val mDisposable = CompositeDisposable()
    private lateinit var db : TarifDatabase
    private lateinit var tarifDao: TarifDao
    private var kategori: String = "Ana Yemekler"
    private lateinit var adapter : RecyclerAdapter
    private var list = List<Tarif>()

    private var lastSelectedButton: Button? = null // Son seçilen butonu saklamak için

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        db = Room.databaseBuilder(requireContext(),TarifDatabase::class.java,"Tarifler").build()
        tarifDao = db.tarifDao()
        verileriAl(kategori)

    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        tarifBinding = FragmentTariflerimBinding.inflate(inflater,container,false)
        return binding!!.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // GridLayoutManager ile RecyclerView'ı hem yatay hem de dikey olarak düzenleme
        val spanCount = 2 // Hücre sayısı, ihtiyaca göre ayarlayabilirsiniz
        binding!!.recyclerView.layoutManager = GridLayoutManager(requireContext(), spanCount)




        val buttonContainer = binding!!.linerLayoutButton

        // strings.xml'den button isimlerini alıyoruz
        val buttonNames = resources.getStringArray(R.array.button_names)
        val buttons = mutableListOf<Button>() // Butonları saklamak için liste

        for (name in buttonNames) {
            val button = Button(requireContext()).apply {
                layoutParams = LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
                ).apply {
                    setMargins(16, 16, 16, 16) // Butonlar arasında boşluk ekliyoruz
                }
                text = name
                tag = name // İsimleri butonlara etiket olarak atıyoruz
                background = resources.getDrawable(R.drawable.button_background, null) // Drawable arka planı uyguluyoruz
                textSize = 12f
                setPadding(35)
                setTextColor(resources.getColor(android.R.color.white, null)) // Yazı rengini beyaz yapıyoruz
            }

            // Butona tıklama işlevi ekliyoruz
            button.setOnClickListener {
                handleButtonClick(button)

            }

            buttonContainer.addView(button)
            buttons.add(button) // Butonu listeye ekliyoruz

            // Belirli bir butonu seçili hale getir
            val targetButtonName = "Ana Yemekler"
            val targetButton = buttons.find { it.text == targetButtonName }
            targetButton?.let {
                handleButtonClick(it)
            }
        }

        binding!!.searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener{
            override fun onQueryTextSubmit(query: String?): Boolean {
                return false
            }

            override fun onQueryTextChange(newText: String?): Boolean {
                filterList(newText!!)

                return true
            }

        })

    }

    private fun filterList(query : String){

        if (query != null){
            val filtredList = List<Tarif>()
            for (i in list){
                if (i.baslik.lowercase(Locale.ROOT).contains(query)){
                    filtredList.add(i)
                }
            }

            if (filtredList.isEmpty()){
                Snackbar.make(view,"Tarif bulunamadı",Snackbar.LENGTH_LONG).show()
                adapter.setF
            }
        }

    }

    private fun handleButtonClick(selectedButton: Button) {
        lastSelectedButton?.isSelected = false
        selectedButton.isSelected = true
        lastSelectedButton = selectedButton

        val buttonName = selectedButton.tag as String
        kategori = buttonName
        verileriAl(kategori)
        println(kategori)

        // Butonu ekranın sağ tarafına yasla
        scrollToButton(selectedButton)
    }

    private fun scrollToButton(button: Button) {
        val scrollView = binding!!.scrollView // HorizontalScrollView referansını alın
        val rect = Rect()
        button.getDrawingRect(rect)
        scrollView.offsetDescendantRectToMyCoords(button, rect)

        // Sağ tarafta bırakılacak boşluk
        val padding = 300 // Boşluk miktarını burada ayarlayın, px cinsinden

        // Butonu ekranın sağ tarafına yaslamak için yatay kaydırma
        val scrollX = maxOf(0, rect.right - scrollView.width + padding)
        scrollView.smoothScrollTo(scrollX, 0)
    }


    private fun verileriAl(kategori : String){

        mDisposable.add(
            tarifDao.findByKategori(kategori)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::handleResponseForInsert)
        )

    }

    private fun handleResponseForInsert(tarifler : List<Tarif>){

        val adapter = RecyclerAdapter(tarifler)
        binding!!.recyclerView.adapter = adapter
        list = tarifler
        //verileriSil(tarifler)

    }

    private fun verileriSil(tarifler: List<Tarif>){
        mDisposable.add(
            tarifDao.delete(tarifler)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::handleResponseForInsertt)
        )
    }

    private fun handleResponseForInsertt(){

    }

    override fun onResume() {
        super.onResume()
        // Fragment tekrar göründüğünde verileri yeniden al
        verileriAl(kategori)
    }

    override fun onDestroyView() {
        super.onDestroyView()
        tarifBinding = null
        mDisposable.clear()
    }

}